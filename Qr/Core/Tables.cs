using System;
using System.Collections.Generic;

namespace QrSharp.Core
{
    public enum EccLevel { L, M, Q, H }

    public readonly record struct EccBlockSpec(
        int TotalCodewords,
        int EcPerBlock,
        (int count, int dataBytes) Group1,
        (int count, int dataBytes) Group2);

    public interface IEccTableProvider
    {
        EccBlockSpec GetSpec(int version); // 1..40
    }

    public sealed class EccTableM : IEccTableProvider
    {
        // ISO/IEC 18004 (M). Comentários: exemplos por versão.
        private static readonly Dictionary<int, EccBlockSpec> M = new()
        {
            {  1, new(  26, 10, ( 1,16), ( 0, 0)) },
            {  2, new(  44, 16, ( 1,28), ( 0, 0)) },
            {  3, new(  70, 26, ( 1,44), ( 0, 0)) },
            {  4, new( 100, 18, ( 2,32), ( 0, 0)) },
            {  5, new( 134, 24, ( 2,43), ( 0, 0)) },
            {  6, new( 172, 16, ( 4,27), ( 0, 0)) },
            {  7, new( 196, 18, ( 4,31), ( 0, 0)) },
            {  8, new( 242, 22, ( 2,38), ( 2,39)) },
            {  9, new( 292, 22, ( 3,36), ( 2,37)) },
            { 10, new( 346, 26, ( 4,43), ( 1,44)) },
            { 11, new( 404, 30, ( 1,50), ( 4,51)) },
            { 12, new( 466, 22, ( 6,36), ( 2,37)) },
            { 13, new( 532, 22, ( 8,37), ( 1,38)) },
            { 14, new( 581, 24, ( 4,40), ( 5,41)) },
            { 15, new( 655, 24, ( 5,41), ( 5,42)) },
            { 16, new( 733, 28, ( 7,45), ( 3,46)) },
            { 17, new( 815, 28, ( 1,46), ( 5,47)) },
            { 18, new( 901, 26, ( 6,43), ( 4,44)) },
            { 19, new( 991, 26, ( 8,44), ( 0, 0)) },
            { 20, new(1085, 26, ( 8,43), ( 4,44)) }, // v20-M: 8×43 + 4×44
            { 21, new(1156, 26, ( 9,43), ( 4,44)) },
            { 22, new(1258, 28, ( 7,46), (10,47)) },
            { 23, new(1364, 28, ( 8,44), ( 8,45)) },
            { 24, new(1474, 28, (12,45), ( 5,46)) },
            { 25, new(1588, 28, (14,45), ( 4,46)) },
            { 26, new(1706, 28, ( 4,46), (18,47)) },
            { 27, new(1828, 28, (13,46), ( 7,47)) },
            { 28, new(1921, 28, (14,46), ( 7,47)) },
            { 29, new(2051, 28, (12,45), (11,46)) },
            { 30, new(2185, 28, ( 6,45), (14,46)) },
            { 31, new(2323, 28, (14,45), (14,46)) },
            { 32, new(2465, 28, (14,45), (14,46)) },
            { 33, new(2611, 28, (14,45), (14,46)) },
            { 34, new(2761, 28, (14,45), (14,46)) },
            { 35, new(2876, 28, ( 6,45), (34,46)) },
            { 36, new(3034, 28, (10,45), (34,46)) },
            { 37, new(3196, 28, (14,45), (34,46)) },
            { 38, new(3362, 28, (18,45), (34,46)) },
            { 39, new(3532, 28, (22,45), (34,46)) },
            { 40, new(3706, 28, (26,45), (34,46)) },
        };

        public EccBlockSpec GetSpec(int version)
        {
            if (version < 1 || version > 40) throw new ArgumentOutOfRangeException(nameof(version));
            return M[version];
        }
    }

    public static class Tables
    {
        // Centros de alinhamento (v1 não tem)
        public static readonly Dictionary<int, int[]> ALIGNMENT = new()
        {
            {1, Array.Empty<int>()},
            {2, new[]{6,18}},{3,new[]{6,22}},{4,new[]{6,26}},{5,new[]{6,30}},{6,new[]{6,34}},
            {7,new[]{6,22,38}},{8,new[]{6,24,42}},{9,new[]{6,26,46}},{10,new[]{6,28,50}},
            {11,new[]{6,30,54}},{12,new[]{6,32,58}},{13,new[]{6,34,62}},
            {14,new[]{6,26,46,66}},{15,new[]{6,26,48,70}},{16,new[]{6,26,50,74}},
            {17,new[]{6,30,54,78}},{18,new[]{6,30,56,82}},{19,new[]{6,30,58,86}},
            {20,new[]{6,34,62,90}},
            {21,new[]{6,28,50,72,94}},{22,new[]{6,26,50,74,98}},{23,new[]{6,30,54,78,102}},
            {24,new[]{6,28,54,80,106}},{25,new[]{6,32,58,84,110}},
            {26,new[]{6,30,58,86,114}},{27,new[]{6,34,62,90,118}},
            {28,new[]{6,26,50,74,98,122}},{29,new[]{6,30,54,78,102,126}},
            {30,new[]{6,26,52,78,104,130}},
            {31,new[]{6,30,56,82,108,134}},{32,new[]{6,34,60,86,112,138}},
            {33,new[]{6,30,58,86,114,142}},{34,new[]{6,34,62,90,118,146}},
            {35,new[]{6,30,54,78,102,126,150}},{36,new[]{6,24,50,76,102,128,154}},
            {37,new[]{6,28,54,80,106,132,158}},{38,new[]{6,32,58,84,110,136,162}},
            {39,new[]{6,26,54,82,110,138,166}},{40,new[]{6,30,58,86,114,142,170}},
        };

        public static int VersionSize(int ver) => 17 + 4 * ver;
        public static int CountBitsForVersion(int ver) => (ver <= 9 ? 8 : 16);
    }
}
